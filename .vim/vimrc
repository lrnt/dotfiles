" lrnt's vim configuration file

execute pathogen#infect()

set nocompatible
set modelines=5
set list
set listchars=tab:▸\ ,eol:¬
set relativenumber
set number
set ruler
set cursorline
set mouse=a
set clipboard=unnamedplus

filetype plugin on

let mapleader=","

set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set smartindent
set autoindent
set wrap
set formatoptions=n1
set textwidth=80
set colorcolumn=+1

syntax on
set background=dark
colorscheme solarized
set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)
set laststatus=2
set foldmethod=marker
set scrolloff=10

" Sudo to write
cnoremap w!! w !sudo tee % >/dev/null

" Spell check language
set spelllang=en_us
map <F5> :setlocal spell!<CR>

if has("autocmd")
    " Jump to last position when reopening a file...
    au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal! g'\"" | endif

    " ... except for commit messages
    au BufReadPost COMMIT_EDITMSG,GITREBASE
        \ exe "normal! gg"

    " Use 2 spaces for following filetypes
    autocmd Filetype html,html.handlebars,htmldjango,javascript,typescript,json,yaml
        \ setlocal ts=2 sts=2 sw=2
endif

" Markdown
let g:markdown_fenced_languages = ['python', 'javascript']

" JSX
let g:jsx_ext_required = 0

" Navigation between split windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Easy edit and view
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%

" CtrlP
nnoremap <leader>f :CtrlP .<cr>
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(pyc)$',
  \ }
let g:ctrlp_user_command = [
  \ '.git/', 'cd %s && git ls-files -oc . --exclude-standard', 'find %s -type f'
  \ ]

" Annoying keys
nnoremap <F1> <nop>
inoremap <F1> <nop>
nnoremap Q <nop>
nnoremap K <nop>

" Toggle paste and nopaste
set pastetoggle=<F2>

" Nice autocomplete
set wildmode=longest,list

" Setup vimwiki
let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]

for directory in ["backup", "swap", "undo"]
    silent! call mkdir($HOME . "/.vim/tmp/" . directory, "p")
endfor
set undodir=~/.vim/tmp/undo//
set backupdir=~/.vim/tmp/backup//
set directory=~/.vim/tmp/swap//
set backup
set backupcopy=yes
